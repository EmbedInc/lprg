;   ***************************************************************
;   * Copyright (C) 2008, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Top module for the LPRG project.  See the LPRG.INS.ASPIC include
;   file for a description of the project.
;
/include "lprg.ins.aspic"

         extern  regs        ;force general registers to be defined
         extern  stack_init  ;initialize software stack
         extern  port_init   ;initialize I/O ports
         extern  cmd_init    ;initialize host command processing
         extern  intr_init   ;initialize interrupt system

         extern  init        ;system startup after individual modules initialized

/block
  /var local s string
  /if [exist "fwtype"]
    /then                    ;FWTYPE exists
      /set s [str s "Firmware type " fwtype]
      /set s [str s " ver " fwver " seq " fwseq]
    /else                    ;FWTYPE does not exist
      /set s [str s "Firmware type ID not defined"]
    /endif
  /append s ", built for PIC " picname
  /show "  " s
  /set s ""
  /set s [str "Fosc = " [eng freq_osc oscdig] "Hz"]
  /set s [str s ", Fcy = " [eng freq_inst oscdig] "Hz"]
  /set s [str s ", Tcy = " [eng [/ 1 freq_inst] oscdig] "s"]
  /show "  " s
  /if debug_icd then
    /show "  RealIce debugging enabled"
    /endif
  /endblock

;*******************************************************************************
;
;   Set static processor configuration bits.
;
.config  code_pack
/pick one by picname

/option "18LF2455"
  //
  //   Primary oscillator is external 8 MHz crystal.
  //
         db      b'11110001' ;config 1L
                 ; XX------  unused
                 ; --1-----  USB clock is 96 MHz PLL / 2 = 48 MHz
                 ; ---10---  system clock is 96 MHz PLL / 4 = 24 MHz
                 ; -----001  div osc by 2 for 4MHz PLL input

         db      b'00111111' ;config 1H
                 ; 0-------  disable oscillator switchover mode
                 ; -0------  disable failsafe clock monitor
                 ; --XX----  unused
                 ; ----1111  HS oscillator with 96MHz USB PLL enabled

         db      b'11010110' ;config 2L
                 ; XX------  unused
                 ; --0-----  disable internal USB voltage regulator
                 ; ---10---  select brownout threshold 2.65-2.93 volts
                 ; -----11-  enable hardware-only brownout reset
                 ; -------0  enable power up timer

         db      b'11111110' ;config 2H
                 ; XXX-----  unused
                 ; ---1111-  select watchdog timer postscaler of 32768
                 ; -------0  disable the watchdog timer

         db      b'11111111' ;config 3L

         db      b'11111001' ;config 3H
                 ; 1-------  select MCLR role for MCLR pin, not RE3
                 ; -XXXX---  unused
                 ; -----0--  disable timer 1 oscillator
                 ; ------0-  port B <4:0> digital I/O on reset, not analog
                 ; -------1  CCP2 pin is RC1, not RB3

         db      b'10011010' ;config 4L
                 ; ---XX-X-  unused
                 ; 1-------  disable debugger, RB6,RB7 normal I/O
                 ; -0------  disable extended instruction set
                 ; --0-----  disable ICSP port, not used this PIC but must be 0
                 ; -----0--  disable low voltage programming
                 ; -------0  disable stack overflow/underflow reset

         db      b'11111111' ;config 4H

         db      b'11111111' ;config 5L, disable all code protection

         db      b'11111111' ;config 5H
                 ; --XXXXXX  unused
                 ; 1-------  disable data EEPROM code protection
                 ; -1------  disable boot block code protection

         db      b'11111111' ;config 6L, disable all write protection

         db      b'11011111' ;config 6H
                 ; ---XXXXX  unused
                 ; 1-------  disable data EEPROM write protection
                 ; -1------  disable boot block write protection
                 ; --0-----  enable configuration write protection

         db      b'11111111' ;config 7L, disable all table read protection

         db      b'11111111' ;config 7H
                 ; X-XXXXXX  unused
                 ; -1------  disable boot block table read protection

/option "18F24K50" "18F25K50"
  //
  //   Primary oscillator is external 12 MHz crystal.
  //
         db      b'11100110' ;CONFIG1L
                 ; XX------  unused
                 ; --X-----  div select for low speed USB, unused
                 ; ---00---  divide clock by 1
                 ; -----X--  unused
                 ; ------1-  PLL clock multiplier enabled
                 ; -------0  PLL multiplies by 4, not 3

         db      b'00110010' ;CONFIG1H
                 ; 0-------  oscillator switchover mode off
                 ; -0------  failsafe clock monitoring off
                 ; --1-----  primary clock always on
                 ; ---X----  unused
                 ; ----0010  HS crystal oscillator mode

         db      b'11100110' ;CONFIG2L
                 ; X-------  unused
                 ; -1------  low-power brownout reset disabled
                 ; --X-----  unused
                 ; ---00---  select brownout reset level of 2.85 V
                 ; -----11-  brownout reset on, not FW controlled
                 ; -------0  powerup timer on

         db      b'11111100' ;CONFIG2H
                 ; XX------  unused
                 ; --1111--  maximum WDT postscaler, 32768
                 ; ------00  WDT off

         db      b'11111111' ;CONFIG3L, unused

         db      b'11111111' ;CONFIG3H
                 ; 1-------  MCLR/RA3 is MCLR
                 ; -X------  SDO output select, unused
                 ; --X-----  unused
                 ; ---X----  T3CKI input select, unused
                 ; ----XX--  unused
                 ; ------0-  RB0-RB4 reset to digital, not analog
                 ; -------1  CCP2 on RC1, not RB3

         db      b'10011111' ;CONFIG4L
                 ; 1-------  disable background debugger
                 ; -0------  enhanced instruction set off
                 ; --0-----  ICD function on RB6/RB7
                 ; ---XX---  unused
                 ; -----1--  low voltage programming enabled
                 ; ------X-  unused
                 ; -------1  stack overflow/underflow causes reset

         db      b'11111111' ;CONFIG4H, unused

         db      b'11111111' ;CONFIG5L
                 ; XXXX----  unused
                 ; ----1111  code protection off

         db      b'11111111' ;CONFIG5H
                 ; 1-------  EEPROM code protection off
                 ; -1------  boot block code protection off
                 ; --XXXXXX  unused

         db      b'11111111' ;CONFIG6L
                 ; XXXX----  unused
                 ; ----1111  write protection off

         db      b'11011111' ;CONFIG6H
                 ; 1-------  EEPROM write protection off
                 ; -1------  boot block write protection off
                 ; --0-----  config bits write protection on
                 ; ---XXXXX  unused

         db      b'11111111' ;CONFIG7L
                 ; XXXX----  unused
                 ; ----1111  table read protection off

         db      b'11111111' ;CONFIG7H
                 ; X-------  unused
                 ; -1------  boot block table read protection off
                 ; --XXXXXX  unused

/optionelse
  /show "  PIC " picname " is not a supported type."
         error   PIC Type
         end
  /stop
  /endpick

;*******************************************************************************
;
;   Global state.
;
         defram  gbankadr
;
;   Declare global flag bytes GFL0 - GFLn.  The assembly constant NFLAGB is set
;   to the number of these flag bytes by the /FLAG preprocessor directives in
;   LPRG.INS.ASPIC.
;
         flags_define        ;define the variables for the global flag bits

;*******************************************************************************
;
;   Executable code.
;
;   Reset vector.
;
.reset   code    0           ;execution starts here after reset or power up
         clrf    intcon      ;make sure all interrupts are disabled
         gjump   start       ;jump to relocatable startup code
;
;   Relocatable code.
;
;   This code only initializes the individual modules.  The remaining system
;   initialization is done in the LPRG_INIT module, which jumps to MAIN when
;   done.
;
.strt    code
start    unbank
;
;   Set the oscillator calibration value if this processor has one and we are
;   using the internal oscillator.  The constant OSC_CAL_CALL is defined in the
;   processor configuration section if the internal oscillator is being used and
;   the factory calibration value is stored in a RETLW instruction at a
;   particular address.
;
  ifdef osc_cal_call         ;internal oscillator being used, get value via RETLW
         setpage osc_cal_call ;set up for calling the specific address
         call    osc_cal_call ;get the calibration value into W
         dbankif osccal
         movwf   osccal      ;adjust the oscillator to the factory calibrated value
         mypage              ;restore paging state to this page
    endif
;
;   Init the interrupt system to completely off and default configuration.
;
  ifdef intcon2
         dbankif intcon2
         movlw   b'10000000'
                 ; 1-------  disable port B passive pullups
                 ; -0000000  init interrupts to disabled
         movwf   intcon2     ;init interrupts off to extent possible
    endif
  ifdef intcon3
         dbankif intcon3
         clrf    intcon3
    endif
         ;
         ;   Make sure all interrupts are individually disabled.
         ;
  ifdef pie1
         dbankif pie1
         clrf    pie1
    endif
  ifdef pie2
         dbankif pie2
         clrf    pie2
    endif
  ifdef pie3
         dbankif pie3
         clrf    pie3
    endif
         ;
         ;   Clear any existing interrupt conditions.
         ;
  ifdef pir1
         dbankif pir1
         clrf    pir1
    endif
  ifdef pir2
         dbankif pir2
         clrf    pir2
    endif
  ifdef pir3
         dbankif pir3
         clrf    pir3
    endif
         ;
         ;   Init all interrupt priorities to the lowest priority.
         ;
  ifdef ipr1
         dbankif ipr1
         clrf    ipr1
    endif
  ifdef ipr2
         dbankif ipr2
         clrf    ipr2
    endif
  ifdef ipr3
         dbankif ipr3
         clrf    ipr3
    endif

  ifdef rcon
         dbankif rcon
         bcf     rcon, ipen
    endif
;
;   Initialize the global flag bits that are declared with /FLAG directives in
;   the main include file.
;
         flags_clear         ;initialize all global flag bits to 0
;
;   Initialize the separate modules.
;
         gcallnr stack_init  ;init the software stack
         gcallnr port_init   ;init I/O ports
         gcallnr task_init   ;init multi-tasking system
         gcallnr prom_init   ;init low level EEPROM handler
         gcallnr opmode_init ;init operating mode state
         gcallnr name_init   ;init user-settable name handling
         gcallnr uart_init   ;init UART handler
         gcallnr cmd_init    ;init host command processing
         gcallnr vpp_init    ;init target chip Vpp handling
         gcallnr vdd_init    ;init target chip Vdd handling
         gcallnr sert_init   ;init serial communication to the target
         gcallnr op_init     ;init target chip high level operations module
         gcallnr ad_init     ;init A/D converter handler
         gcallnr led_init    ;init STATUS LED handler
         gcallnr wait_init   ;init wait for voltage level change module
         gcallnr f30_init    ;init 30F (dsPIC) specific routines
         gcallnr usb_init    ;init USB handler
         gcallnr usb0_init   ;init USB endpoint 0 request processing

         gcallnr intr_init   ;init interrupt management and enable interrupts
;
;   All the individual modules have been initialized.  Now start up the overall
;   system.
;
         gjump   init        ;go to system initialization module

         end
