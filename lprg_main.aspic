;   ***************************************************************
;   * Copyright (C) 2008, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   This module contains the main application routine that is run after the
;   system is initialized.
;
/include "lprg.ins.aspic"

         extern_flags        ;declare global flag bits EXTERN
         extern  tick10ms    ;10 ms clock tick counter

;*******************************************************************************
;
;   Configuration constants.
;
lbank    equ     1           ;register bank for the local state of this module
;
;   Derived constants.
;
lbankadr equ     bankadr(lbank) ;address within local state register bank

;*******************************************************************************
;
;   Local state.
;
         defram  lbankadr

usb10ms  res     1           ;10 ms clock USB is up to date with

/if debug then
         global  usb10ms
  /endif


.main    code
;*******************************************************************************
;
;   Routine MAIN
;
;   This entry point is jumped to from the INIT module, once system
;   initialization is complete.
;
         glbent  main

;**********
;
;   Initialize the state managed by this module.
;
         movff   tick10ms, usb10ms ;init clock USB routines are up to date with

;**********
;
;   Main application loop.  Back here to look for something to do.  Whenever
;   something is found that needs handling, a handler routine is jumped to.  All
;   handler routines jump back to LOOP_MAIN when done.  This means events are
;   checked in priority order, with high priority events checked earlier.
;
         glbent  loop_main
         gcall   task_yield  ;give other tasks a chance to run
;
;   Handle USB reset.
;
         dbankif gbankadr
         btfss   flag_usbreset
         jump    no_usbreset

         bcf     flag_usbreset ;clear the event condition
         bsf     flag_cmdreset ;tell the command processor to reset itself
no_usbreset
;
;   Run the command processor for a short time.
;
         gcall   cmd_run
;
;   Re-evaluate the LED display based on the current system state.
;
         gcall   led_update
;
;   Notify the USB routines of any new elapsed time.  This is used to detect
;   wedged USB hardware, in which case the processor is reset.
;
;   Multiple accumulated ticks are deliberately not handled here.  If the USB
;   system is notified of multiple ticks in succession without its task being
;   able to run, then it may look like there was no activity for an entire
;   interval.
;
         dbankif gbankadr
         movf    tick10ms, w ;get the current 10 ms clock tick counter
         dbankif lbankadr
         xorwf   usb10ms, w  ;compare to value USB is up to date with
         bz      d_usbtick   ;no more clock ticks for USB this iteration ?
         ;
         ;   There is a new clock tick.
         ;
         dbankif lbankadr
         incf    usb10ms     ;update clock value now current with
         loadk8  reg0, 10    ;pass number of ms elapsed
         gcall   usb_tick    ;notify USB routines of new elapsed time

d_usbtick unbank             ;done with clock ticks for USB routines

         jump    loop_main   ;back to check all event conditions again

         end
